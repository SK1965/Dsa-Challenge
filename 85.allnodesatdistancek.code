/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    vector<int> distanceK(TreeNode* root, TreeNode* target, int k) {
        if(!root) return {};
        
        unordered_map<TreeNode* , TreeNode*> parent;
        queue<TreeNode*> q;
        
        q.push(root);
        parent[root]=nullptr;
        while(!q.empty()){
           int size=q.size();
           for(int i=0;i<size;i++){
              TreeNode* node = q.front();
              q.pop();

              if(node->left){
                parent[node->left] = node;
                q.push(node->left);
                }
                if(node->right){
                parent[node->right] = node;
                q.push(node->right);
                }
           }
        }
        map<TreeNode* , bool> visited;
        q.push(target);
        int dist=0;
        while(dist<k){
            int size = q.size();
            for(int i=0;i<size;i++){
                TreeNode* node = q.front();
                 q.pop(); 
                if(parent[node] && !visited[parent[node]]){
                    q.push(parent[node]);
                }
                if(node->left && !visited[node->left]){
                    q.push(node->left);
                }
                if(node->right && !visited[node->right]){
                    q.push(node->right);
                }
                visited[node] = true;
            }
            dist++;
        }
        vector<int> ans;
        while(!q.empty()){
            ans.push_back(q.front()->val);
            q.pop();
        }
        
        return ans;
    }
};