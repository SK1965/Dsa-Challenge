class NodeValue{
    public :
    int maxNode , minNode , maxSize;
    
    NodeValue(int minNode , int maxNode  ,int maxSize){
        this->minNode = minNode;
        this->maxNode = maxNode;
        this->maxSize = maxSize;
    }
};

class Solution{
    
    public:
    NodeValue largestsubtreehelper(Node* root){
        if(!root)return NodeValue(INT_MAX , INT_MIN ,0 );
        
        auto left =  largestsubtreehelper(root->left);
        auto right =  largestsubtreehelper(root->right);
        
        if(left.maxNode < root->data && right.minNode > root->data){
            return NodeValue(min(root->data, left.minNode) , 
                             max(root->data , right.maxNode) , 
                             1+left.maxSize+right.maxSize) ;
        }
        else
        return NodeValue(INT_MIN, INT_MAX ,max(left.maxSize,right.maxSize));
        
        
    }
    
    int largestBst(Node *root)
    {
    	return largestsubtreehelper(root).maxSize;
    }
};