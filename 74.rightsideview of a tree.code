/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<int> rightSideView(TreeNode* root) {
        if(!root)return {};
        vector<int>ans;
        queue<TreeNode*> q;
        q.push(root);
        while(!q.empty()){
            int size = q.size();
            int ele=0;
            for(int i=0;i<size;i++){
            TreeNode* node = q.front();
            q.pop();
            if(node->left)q.push(node->left);
            if(node->right)q.push(node->right);
            ele = node->val;
            }
            ans.push_back(ele);
        }
        return ans;
    }
};



/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<int> rightview(TreeNode* root , int level , vector<int>& ans){
        if(root ==nullptr){
            return {};
        }
        if(level == ans.size()){
            ans.push_back(root->val);
        }
        rightview(root->right , level+1 , ans);
        rightview(root->left , level+1 ,ans);
        return ans;
    }
    vector<int> rightSideView(TreeNode* root) {
        int level = 0;
        vector<int> ans={};
        rightview(root , level  ,ans);
        return ans;
    }
};