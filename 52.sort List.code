/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* findmid(ListNode* head){
        if(head==nullptr|| head->next==nullptr )return head;
         ListNode* slow=head;
         ListNode* fast = head->next;
         while(fast && fast->next){
            slow = slow->next;
            fast = fast->next->next;
         }
         return slow;
    }
    ListNode* merge( ListNode* list1 , ListNode* list2){
         ListNode* dummynode =  new ListNode();
          ListNode* temp = dummynode;
        while(list1 || list2){
            if(list1 &&  list2){
                if(list1->val >= list2->val){
                    temp->next = list2;
                    list2=list2->next;
                }else{
                    temp->next = list1;
                    list1=list1->next;
                }
            }
            else if(list1){
                temp->next = list1;
                list1=list1->next;
            }else if(list2){
                temp->next = list2;
                list2=list2->next;
            }
            temp=temp->next;
        }
        return dummynode->next;
    }
    ListNode* sortList(ListNode* head) {
      if(head==nullptr || head->next==nullptr)return head;
      ListNode* mid = findmid(head);
      ListNode* list2 =  mid->next;
      mid->next = nullptr;
      ListNode* m1 = sortList(head);
      ListNode* m2 = sortList(list2);
      return  merge(m1 ,m2);
     
    }
};