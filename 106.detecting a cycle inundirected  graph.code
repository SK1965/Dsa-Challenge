class Solution {
  public:
    // Function to detect cycle in an undirected graph.
    bool bfs(int src, vector<int> adj[] , vector<int>& vis){
         queue<pair<int ,int>> q; //current , parent
        q.push({src ,-1});
        vis[src]=1;
        while(!q.empty()){
            int node = q.front().first;
            int parent = q.front().second;
            q.pop();
            for(auto it:adj[node]){
                if(!vis[it]){
                    q.push({it ,node});
                    vis[it]=1;
                    
                }
                else if(parent != it){
                    return true;
                }
        }
    
        }
        
        return false;
    }
    
    bool isCycle(int V, vector<int> adj[]) {
        // Code here
        vector<int> vis(V ,0);
        
        for(int i=0 ; i<V;i++){
            if(!vis[i]){
                if(bfs( i , adj,vis)){
                    return true;
                }
            }
        }
        return false;
    }
};