class Solution {
public:
    
    void dfs(vector<vector<char>>& grid , int i ,int j ,int m ,int n, vector<vector<int>>& vis){
        vis[i][j]=1;
        
        if(i>0 && !vis[i-1][j] && grid[i-1][j]=='1')dfs(grid,i-1,j,m,n,vis);
        if(j>0 && !vis[i][j-1] && grid[i][j-1]=='1')dfs(grid , i,j-1,m,n, vis);
        if(i<m-1 && !vis[i+1][j] &&grid[i+1][j]=='1')dfs(grid ,i+1,j,m,n, vis);
        if(j<n-1 && !vis[i][j+1] &&grid[i][j+1]=='1')dfs(grid,i,j+1,m,n,vis);
        
    }
    int numIslands(vector<vector<char>>& grid) {
        int cnt =0;
        int m=grid.size() , n=grid[0].size();
        vector<vector<int>> vis(m,vector<int>(n,0));
        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
                if(!vis[i][j] && grid[i][j]=='1'){
                    cnt++;
                    dfs(grid , i , j ,m,n, vis);
                }
            }
        }
        return cnt;
    }
};